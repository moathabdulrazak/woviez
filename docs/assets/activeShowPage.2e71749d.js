import{_ as w,c as r,a as o,t as d,F as u,r as p,o as h,n as g,i as v,j as P,h as b}from"./index.2bd95443.js";const m="88d2c735e36149b50c9d46f09826ec06",i=150,x={name:"ActiveShowPage",data(){return{show:null,seasons:[],selectedSeason:1,currentPage:1,watchedEpisodes:[]}},async created(){const s=this.$route.params.id,e=`https://api.themoviedb.org/3/tv/${s}?api_key=${m}&append_to_response=seasons`,l=await(await fetch(e)).json();this.show=l,this.seasons=l.seasons,this.loadWatchedEpisodes(),await Promise.all(this.seasons.map(async a=>{const n=`https://api.themoviedb.org/3/tv/${s}/season/${a.season_number}?api_key=${m}`,t=await(await fetch(n)).json();a.episodes=t.episodes}))},computed:{selectedSeasonEpisodes(){const s=this.seasons.find(e=>e.season_number==this.selectedSeason);return s?s.episodes:[]},visibleEpisodes(){const s=(this.currentPage-1)*i,e=s+i;return this.selectedSeasonEpisodes.slice(s,e)},hasNextPage(){const e=this.currentPage*i+i;return this.selectedSeasonEpisodes.length>e},hasPreviousPage(){return(this.currentPage-2)*i>=0},hasNextSeason(){const s=this.selectedSeason+1;return this.seasons.some(e=>e.season_number===s)},hasPreviousSeason(){const s=this.selectedSeason-1;return this.seasons.some(e=>e.season_number===s)},selectedSeasonIndex(){return this.seasons.findIndex(s=>s.season_number===this.selectedSeason)}},methods:{nextPage(){const s=this.currentPage*i;if(this.selectedSeasonEpisodes.length>s)this.currentPage+=1;else{const e=this.selectedSeason+1;this.seasons.some(c=>c.season_number===e)&&(this.selectedSeason=e,this.currentPage=1)}window.scrollTo(0,0)},previousPage(){if((this.currentPage-2)*i>=0)this.currentPage-=1;else{const e=this.selectedSeason-1;if(this.seasons.some(c=>c.season_number===e)){this.selectedSeason=e;const c=Math.ceil(this.selectedSeasonEpisodes.length/i);this.currentPage=c}}window.scrollTo(0,0)},nextSeason(){const s=this.selectedSeason+1;this.seasons.some(e=>e.season_number===s)&&(this.selectedSeason=s,this.currentPage=1,window.scrollTo(0,0))},previousSeason(){const s=this.selectedSeason-1;if(this.seasons.some(e=>e.season_number===s)){this.selectedSeason=s;const e=Math.ceil(this.selectedSeasonEpisodes.length/i);this.currentPage=e,window.scrollTo(0,0)}},toggleWatched(s){this.isEpisodeWatched(s)||this.watchedEpisodes.push(s),localStorage.setItem(`watched_${this.show.id}`,JSON.stringify(this.watchedEpisodes))},loadWatchedEpisodes(){const s=localStorage.getItem(`watched_${this.show.id}`);s&&(this.watchedEpisodes=JSON.parse(s))},isEpisodeWatched(s){return this.watchedEpisodes.some(e=>e.id===s.id)},getEpisodePoster(s){return s.still_path?`https://image.tmdb.org/t/p/w185${s.still_path}`:"/static/placeholder.png"},getSeasonPoster(s){return s.poster_path?`https://image.tmdb.org/t/p/w185${s.poster_path}`:"/static/placeholder.png"}}},f={class:"active-show-page"},E={class:"d-flex"},I={class:"show-poster"},k=["src"],y={class:"show-details pt-3 text-light"},C={class:"overview"},N={class:"season-selector"},W=o("h2",{class:"pt-2"},"Select Season:",-1),T={class:"text-light"},j=["onClick"],A={class:"episode-list p-3"},B=["onClick"],D={class:"episode-number"},O={class:"episode-title text-light"},R={class:"episode-actions"},F=["src"],J={class:"pagination pb-3"},M=["disabled"],V=["disabled"];function z(s,e,c,l,a,n){const _=b("router-link");return h(),r(u,null,[o("div",f,[o("div",E,[o("div",I,[o("img",{class:"img-fluid pt-3",src:"https://image.tmdb.org/t/p/w300"+a.show.poster_path,alt:"Poster for {{ show.name }}"},null,8,k)]),o("div",y,[o("h1",null,d(a.show.name),1),o("div",C,d(a.show.overview),1)])]),o("div",N,[W,o("div",T,[(h(!0),r(u,null,p(a.seasons,t=>(h(),r("button",{class:g(["btn",{active:t.season_number===a.selectedSeason}]),key:t.id,onClick:S=>{a.selectedSeason=t.season_number,a.currentPage=1}},d(t.name),11,j))),128))])])]),o("div",A,[(h(!0),r(u,null,p(n.visibleEpisodes,t=>(h(),r("div",{key:t.id,class:"episode"},[o("button",{class:g(["watched-button",{watched:n.isEpisodeWatched(t)}]),onClick:S=>n.toggleWatched(t)},d(n.isEpisodeWatched(t)?"watched":"not watched"),11,B),o("div",D,d(t.episode_number),1),v(_,{to:{name:"episode",params:{id:a.show.id,season:a.selectedSeason,episode:t.episode_number}}},{default:P(()=>[o("div",O,d(t.name),1),o("div",R,[o("img",{class:"img-fluid",src:n.getEpisodePoster(t),alt:""},null,8,F)])]),_:2},1032,["to"])]))),128))]),o("div",J,[o("button",{class:"previous-season",disabled:!n.hasPreviousSeason,onClick:e[0]||(e[0]=(...t)=>n.previousSeason&&n.previousSeason(...t))}," Previous Season ",8,M),o("button",{class:"next-season",disabled:!n.hasNextSeason,onClick:e[1]||(e[1]=(...t)=>n.nextSeason&&n.nextSeason(...t))}," Next Season ",8,V)])],64)}const K=w(x,[["render",z]]);export{K as default};
